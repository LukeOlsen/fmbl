generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model records {
  id                      Int     @id @default(autoincrement())
  year                    Int?
  team                    String?
  conference              String?
  division                String?
  total_games             Int?
  total_wins              Int?
  total_losses            Int?
  total_ties              Int?
  conference_games_games  Int?
  conference_games_wins   Int?
  conference_games_losses Int?
  conference_games_ties   Int?
  home_games_games        Int?
  home_games_wins         Int?
  home_games_losses       Int?
  home_games_ties         Int?
  away_games_games        Int?
  away_games_wins         Int?
  away_games_losses       Int?
  away_games_ties         Int?
  team_id                 Int?
  teams                   teams?  @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model recruits {
  id            Int     @id @default(autoincrement())
  recruitType   String?
  year          Int?
  ranking       Int?
  name          String?
  school        String?
  committedTo   String?
  position      String?
  height        Int?
  weight        Int?
  stars         Int?
  rating        Float?
  city          String?
  stateProvince String?
  country       String?
  team_id       Int?
  longitude     Int?
  latitude      Int?
  fips          Int?
  teams         teams?  @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model talents {
  year    Int?
  school  String?
  talent  Float?
  team_id Int?
  teams   teams?  @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model teams {
  id                                              Int             @id
  school                                          String?
  mascot                                          String?
  abbreviation                                    String?
  alt_name_1                                      String?
  alt_name_2                                      String?
  alt_name_3                                      String?
  conference                                      String?
  division                                        String?
  color                                           String?
  alt_color                                       String?
  logos_0                                         String?
  logos_1                                         String?
  betting_lines_betting_lines_away_team_idToteams betting_lines[] @relation("betting_lines_away_team_idToteams")
  betting_lines_betting_lines_home_team_idToteams betting_lines[] @relation("betting_lines_home_team_idToteams")
  pbp2020                                         pbp2020[]
  records                                         records[]
  recruits                                        recruits[]
  talents                                         talents[]       @ignore
}

model drives {
  offense             String?
  offense_conference  String?
  defense             String?
  defense_conference  String?
  game_id             Decimal? @db.Decimal
  id                  Decimal  @id(map: "drives_old_pkey") @db.Decimal
  drive_number        Int?
  scoring             Boolean?
  start_period        Int?
  start_yardline      Int?
  start_yards_to_goal Int?
  start_time_minutes  Int?     @map("start_time.minutes")
  start_time_seconds  Int?     @map("start_time.seconds")
  end_period          Int?
  end_yardline        Int?
  end_yards_to_goal   Int?
  end_time_minutes    Int?     @map("end_time.minutes")
  end_time_seconds    Int?     @map("end_time.seconds")
  elapsed_minutes     Int?     @map("elapsed.minutes")
  elapsed_seconds     Int?     @map("elapsed.seconds")
  plays               Int?
  yards               Int?
  drive_result        String?
  is_home_offense     Boolean?
  start_offense_score Int?
  start_defense_score Int?
  end_offense_score   Int?
  end_defense_score   Int?
}

model pbp2020 {
  id                 Decimal  @id @db.Decimal
  offense            String?
  offense_conference String?
  defense            String?
  defense_conference String?
  home               String?
  away               String?
  offense_score      Int?
  defense_score      Int?
  game_id            Decimal? @db.Decimal
  drive_id           Decimal? @db.Decimal
  drive_number       Int?
  play_number        Int?
  period             Int?
  clock_minutes      Int?     @map("clock.minutes")
  clock_seconds      Int?     @map("clock.seconds")
  offense_timeouts   Int?
  defense_timeouts   Int?
  yard_line          Int?
  yards_to_goal      Int?
  down               Int?
  distance           Int?
  scoring            Boolean?
  yards_gained       Int?
  play_type          String?
  play_text          String?
  ppa                String?
  team_id            Int?
  teams              teams?   @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model betting_lines {
  game_id                                 BigInt?
  home_team                               String?
  home_score                              Int?
  away_Team                               String?
  away_score                              Int?
  line_provider                           String?
  over_under                              Float?
  spread                                  Float?
  formatted_spread                        String?
  opening_spread                          Float?
  opening_over_under                      Float?
  home_moneyline                          Int?
  away_moneyline                          Int?
  id                                      Int     @id @unique(map: "lines_pkey") @default(autoincrement())
  home_team_id                            Int?
  away_team_id                            Int?
  season                                  Int?
  teams_betting_lines_away_team_idToteams teams?  @relation("betting_lines_away_team_idToteams", fields: [away_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  teams_betting_lines_home_team_idToteams teams?  @relation("betting_lines_home_team_idToteams", fields: [home_team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  games                                   games?  @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "gamessk")
}

model games {
  id                 BigInt          @id
  season             Int?
  week               Int?
  season_type        String?         @db.VarChar(50)
  start_date         DateTime?       @db.Date
  neutral_site       Boolean?
  conference_game    Boolean?
  attendance         Int?
  venue_id           Int?
  venue              String?         @db.VarChar(100)
  home_team_id       Int?
  home_team          String?         @db.VarChar(100)
  home_conference    String?         @db.VarChar(50)
  home_points        Int?
  home_line_1        Int?
  home_line_2        Int?
  home_line_3        Int?
  home_line_4        Int?
  home_post_win_prob Float?
  home_pregame_elo   Int?
  home_postgame_elo  Int?
  away_team_id       Int?
  away_team          String?         @db.VarChar(100)
  away_conference    String?         @db.VarChar(50)
  away_points        Int?
  away_line_1        Int?
  away_line_2        Int?
  away_line_3        Int?
  away_line_4        Int?
  away_post_win_prob Float?
  away_pregame_elo   Int?
  away_postgame_elo  Int?
  excitement_index   Float?
  betting_lines      betting_lines[]
}
